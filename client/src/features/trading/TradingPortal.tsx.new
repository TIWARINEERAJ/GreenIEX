import React, { useState, useEffect, useCallback, useMemo, ChangeEvent } from 'react';
import { EnergyType } from '../../types/market';
import { wsService } from '../../services/websocket';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { format } from 'date-fns';

// Make sure this matches your actual Order type
interface Order {
  id: string;
  energyType: EnergyType;
  quantity: string;
  price: number;
  orderType: 'BUY' | 'SELL';
}

interface PricePoint {
  timestamp: number;
  price: number;
  energyType: EnergyType;
}

const TradingPortal: React.FC = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [priceHistory, setPriceHistory] = useState<PricePoint[]>([]);
  const [buyDepth, setBuyDepth] = useState<{price: number, quantity: number}[]>([]);
  const [sellDepth, setSellDepth] = useState<{price: number, quantity: number}[]>([]);
  const [orderForm, setOrderForm] = useState({
    energyType: 'SOLAR' as EnergyType,
    quantity: '',
    price: '',
    orderType: 'BUY' as 'BUY' | 'SELL',
    recAttached: false
  });

  const showToast = useCallback((message: string, type: 'success' | 'error') => {
    alert(`${type.toUpperCase()}: ${message}`);
  }, []);

  // Calculate market statistics
  const marketStats = useMemo(() => {
    if (orders.length === 0) return null;

    const prices = orders.map(o => o.price);
    const volumes = orders.map(o => Number(o.quantity));
    
    return {
      high: Math.max(...prices),
      low: Math.min(...prices),
      volume: volumes.reduce((a, b) => a + b, 0),
      lastPrice: orders[orders.length - 1].price
    };
  }, [orders]);

  // Connect to WebSocket
  useEffect(() => {
    wsService.connect();

    // Subscribe to order book updates
    const unsubscribe = wsService.subscribeToOrderBook((newOrders) => {
      setOrders(newOrders);
      updateMarketDepth(newOrders);
      updatePriceHistory(newOrders);
    });

    return () => {
      unsubscribe();
      wsService.disconnect();
    };
  }, []);

  // Calculate market depth
  const updateMarketDepth = useCallback((orders: Order[]) => {
    const buyOrders = orders
      .filter(o => o.orderType === 'BUY')
      .sort((a, b) => b.price - a.price);
    const sellOrders = orders
      .filter(o => o.orderType === 'SELL')
      .sort((a, b) => a.price - b.price);

    const buyDepthData = buyOrders.reduce<{price: number, quantity: number}[]>(
      (acc, order) => {
        const lastQuantity = acc[acc.length - 1]?.quantity || 0;
        acc.push({ price: order.price, quantity: lastQuantity + Number(order.quantity) });
        return acc;
      }, []
    );

    const sellDepthData = sellOrders.reduce<{price: number, quantity: number}[]>(
      (acc, order) => {
        const lastQuantity = acc[acc.length - 1]?.quantity || 0;
        acc.push({ price: order.price, quantity: lastQuantity + Number(order.quantity) });
        return acc;
      }, []
    );

    setBuyDepth(buyDepthData);
    setSellDepth(sellDepthData);
  }, []);

  // Update price history
  const updatePriceHistory = useCallback((orders: Order[]) => {
    const latestOrder = orders[orders.length - 1];
    if (!latestOrder) return;

    setPriceHistory(prev => [
      ...prev,
      {
        timestamp: Date.now(),
        price: latestOrder.price,
        energyType: latestOrder.energyType
      }
    ]);
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      wsService.placeOrder({
        energyType: orderForm.energyType,
        quantity: Number(orderForm.quantity),
        price: Number(orderForm.price),
        orderType: orderForm.orderType,
        recAttached: orderForm.recAttached
      });
      showToast('Order placed successfully', 'success');
      setOrderForm({
        energyType: 'SOLAR' as EnergyType,
        quantity: '',
        price: '',
        orderType: 'BUY' as 'BUY' | 'SELL',
        recAttached: false
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
      showToast(errorMessage, 'error');
    }
  };

  const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setOrderForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Market Statistics */}
      <div className="grid grid-cols-4 gap-4 mb-8">
        {marketStats && (
          <>
            <div className="bg-white p-4 rounded shadow-sm">
              <div className="text-sm text-gray-600">24h High</div>
              <div className="text-lg font-bold">₹{marketStats.high.toFixed(2)}</div>
            </div>
            <div className="bg-white p-4 rounded shadow-sm">
              <div className="text-sm text-gray-600">24h Low</div>
              <div className="text-lg font-bold">₹{marketStats.low.toFixed(2)}</div>
            </div>
            <div className="bg-white p-4 rounded shadow-sm">
              <div className="text-sm text-gray-600">24h Volume (MWh)</div>
              <div className="text-lg font-bold">{marketStats.volume.toFixed(2)}</div>
            </div>
            <div className="bg-white p-4 rounded shadow-sm">
              <div className="text-sm text-gray-600">Last Price</div>
              <div className="text-lg font-bold">₹{marketStats.lastPrice.toFixed(2)}</div>
            </div>
          </>
        )}
      </div>

      {/* Price Chart */}
      <div className="bg-white p-6 rounded shadow-sm mb-8">
        <h2 className="text-2xl font-semibold mb-4">Price Chart</h2>
        <div className="h-96">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={priceHistory}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis 
                dataKey="timestamp" 
                tickFormatter={(timestamp) => format(timestamp, 'HH:mm')}
              />
              <YAxis />
              <Tooltip 
                labelFormatter={(timestamp) => format(timestamp, 'HH:mm:ss')}
                formatter={(value: number) => [`₹${value.toFixed(2)}`, 'Price']}
              />
              <Legend />
              <Line 
                type="monotone" 
                dataKey="price" 
                stroke="#2C5282" 
                dot={false}
                name="Price (₹/kWh)"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Market Depth */}
      <div className="bg-white p-6 rounded shadow-sm mb-8">
        <h2 className="text-2xl font-semibold mb-4">Market Depth</h2>
        <div className="h-96">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis 
                dataKey="price"
                type="number"
                domain={['dataMin', 'dataMax']}
              />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line 
                data={buyDepth}
                type="stepAfter" 
                dataKey="quantity" 
                stroke="#48BB78"
                name="Buy Depth"
              />
              <Line 
                data={sellDepth}
                type="stepAfter" 
                dataKey="quantity" 
                stroke="#F56565"
                name="Sell Depth"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-8">
        {/* Order Form */}
        <div className="bg-white p-6 rounded shadow-sm">
          <h2 className="text-2xl font-semibold mb-6">Place Order</h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block mb-2">Energy Type</label>
              <select
                value={orderForm.energyType}
                onChange={handleInputChange}
                name="energyType"
                className="input"
              >
                <option value="SOLAR">Solar</option>
                <option value="WIND">Wind</option>
                <option value="HYDRO">Hydro</option>
              </select>
            </div>

            <div>
              <label className="block mb-2">Order Type</label>
              <select
                value={orderForm.orderType}
                onChange={handleInputChange}
                name="orderType"
                className="input"
              >
                <option value="BUY">Buy</option>
                <option value="SELL">Sell</option>
              </select>
            </div>

            <div>
              <label className="block mb-2">Quantity (MWh)</label>
              <input
                type="number"
                value={orderForm.quantity}
                onChange={handleInputChange}
                name="quantity"
                min="0"
                step="0.01"
                className="input"
              />
            </div>

            <div>
              <label className="block mb-2">Price (₹/kWh)</label>
              <input
                type="number"
                value={orderForm.price}
                onChange={handleInputChange}
                name="price"
                min="0"
                step="0.01"
                className="input"
              />
            </div>

            <button
              type="submit"
              className="btn btn-primary w-full"
            >
              Place Order
            </button>
          </form>
        </div>

        {/* Order Book */}
        <div className="bg-white p-6 rounded shadow-sm">
          <h2 className="text-2xl font-semibold mb-6">Order Book</h2>
          <div className="grid grid-cols-2 gap-4">
            {/* Sell Orders */}
            <div>
              <div className="bg-gray-50 p-2 grid grid-cols-2 font-semibold border-b">
                <div>Price</div>
                <div className="text-right">Quantity</div>
              </div>
              <div className="max-h-96 overflow-y-auto">
                {orders
                  .filter(o => o.orderType === 'SELL')
                  .sort((a, b) => b.price - a.price)
                  .map(order => (
                    <div 
                      key={order.id} 
                      className="grid grid-cols-2 p-2 border-b border-gray-100 text-red-600"
                    >
                      <div>₹{order.price.toFixed(2)}</div>
                      <div className="text-right">{order.quantity}</div>
                    </div>
                  ))}
              </div>
            </div>

            {/* Buy Orders */}
            <div>
              <div className="bg-gray-50 p-2 grid grid-cols-2 font-semibold border-b">
                <div>Price</div>
                <div className="text-right">Quantity</div>
              </div>
              <div className="max-h-96 overflow-y-auto">
                {orders
                  .filter(o => o.orderType === 'BUY')
                  .sort((a, b) => b.price - a.price)
                  .map(order => (
                    <div 
                      key={order.id} 
                      className="grid grid-cols-2 p-2 border-b border-gray-100 text-green-600"
                    >
                      <div>₹{order.price.toFixed(2)}</div>
                      <div className="text-right">{order.quantity}</div>
                    </div>
                  ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TradingPortal;
